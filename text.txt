import os
from dotenv import load_dotenv
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser

# Load environment variables from .env file
load_dotenv()

# Retrieve the API key from environment variables
openai_api_key = os.getenv('OPENAI_API_KEY')

# Check if API key is present
if not openai_api_key:
    raise ValueError("No OpenAI API key found. Please set OPENAI_API_KEY in your .env file.")

# Initialize the Chat LLM
llm = ChatOpenAI(
    api_key=openai_api_key,
    model_name="gpt-3.5-turbo",
    temperature=0.7
)


# Job Seeker Agent
def job_seeker_agent(skills, location, preferences):
    # Create a prompt template
    prompt = ChatPromptTemplate.from_template("""
    You are a job-seeking assistant. Given the following details:
    - Skills: {skills}
    - Location: {location}
    - Preferences: {preferences}

    Suggest suitable job opportunities and relevant training programs.
    """)

    # Create a chain using the new LangChain syntax
    chain = (
            RunnablePassthrough()  # Pass through the input
            | prompt  # Apply the prompt template
            | llm  # Pass to the language model
            | StrOutputParser()  # Convert output to string
    )

    # Use invoke instead of run
    return chain.invoke({
        "skills": skills,
        "location": location,
        "preferences": preferences
    })


# Employer Agent
def employer_agent(job_description, required_skills, location):
    # Create a prompt template
    prompt = ChatPromptTemplate.from_template("""
    You are a hiring assistant. Given the following job details:
    - Job Description: {job_description}
    - Required Skills: {required_skills}
    - Location: {location}
    Suggest potential candidates and highlight any skill gaps in the market.
    """)

    # Create a chain using the new LangChain syntax
    chain = (
            RunnablePassthrough()  # Pass through the input
            | prompt  # Apply the prompt template
            | llm  # Pass to the language model
            | StrOutputParser()  # Convert output to string
    )

    # Use invoke instead of run
    return chain.invoke({
        "job_description": job_description,
        "required_skills": required_skills,
        "location": location
    })


# Market Intelligence Agent
def market_intelligence_agent(industry, location):
    # Create a prompt template
    prompt = ChatPromptTemplate.from_template("""
    You are a market intelligence assistant. Given the following details:
    - Industry: {industry}
    - Location: {location}
    Provide insights on current job market trends, in-demand skills, and economic forecasts.
    """)

    # Create a chain using the new LangChain syntax
    chain = (
            RunnablePassthrough()  # Pass through the input
            | prompt  # Apply the prompt template
            | llm  # Pass to the language model
            | StrOutputParser()  # Convert output to string
    )

    # Use invoke instead of run
    return chain.invoke({
        "industry": industry,
        "location": location
    })


# Example usage
if __name__ == "__main__":
    # Demonstrate how to use the agents
    job_opportunities = job_seeker_agent(
        skills="Python, Machine Learning, Data Analysis",
        location="San Francisco",
        preferences="Remote work, Tech startups"
    )
    print("Job Seeker Suggestions:", job_opportunities)



---------------------------------------------------------------------------------------------

# app.py
import streamlit as st
from agents import job_seeker_agent, employer_agent, market_intelligence_agent

st.title("Multi-Agent System for Workforce Development")

# Tabs for different agents
tab1, tab2, tab3 = st.tabs(["Job Seeker", "Employer", "Market Intelligence"])

# Job Seeker Interface
with tab1:
    st.header("Job Seeker Agent")
    skills = st.text_input("Enter your skills:")
    location = st.text_input("Enter your preferred job location:")
    preferences = st.text_input("Enter any job preferences:")
    if st.button("Find Jobs and Training"):
        result = job_seeker_agent(skills, location, preferences)
        st.write(result)

# Employer Interface
with tab2:
    st.header("Employer Agent")
    job_description = st.text_area("Enter the job description:")
    required_skills = st.text_input("Enter required skills:")
    location = st.text_input("Enter job location:")
    if st.button("Find Candidates"):
        result = employer_agent(job_description, required_skills, location)
        st.write(result)

# Market Intelligence Interface
with tab3:
    st.header("Market Intelligence Agent")
    industry = st.text_input("Enter the industry:")
    location = st.text_input("Enter the location:")
    if st.button("Get Market Insights"):
        result = market_intelligence_agent(industry, location)
        st.write(result)
